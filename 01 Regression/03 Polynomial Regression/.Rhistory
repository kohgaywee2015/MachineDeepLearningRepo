BR06 BR09 BR13
BR11
CA71 CA81 CA87 CA91 CA94 CA98 CA04 CA07 CA10 CA13
CA75 CA97 CA00
CN02
CO04 CO07 CO10 CO13
CZ92 CZ96 CZ02 CZ04 CZ07 CZ10 CZ13
DK87 DK92 DK95 DK00 DK04 DK07 DK10 DK13
DO07
EG12
EE00 EE04 EE07 EE10 EE13
FI87 FI91 FI95 FI00 FI04 FI07 FI10 FI13
FR78 FR84 FR89 FR94 FR00 FR05 FR10
DE73 DE78 DE83 DE89 DE94 DE00 DE04 DE07 DE10 DE13
DE81 DE84
GE10 GE13
GR95 GR00 GR04 GR07 GR10 GR13
GT06 GT11 GT14
HU91 HU94 HU99 HU05 HU07 HU09 HU12
IS04 IS07 IS10
IN04 IN11
IE87 IE94 IE00 IE04 IE07 IE10
IE95
IE96
IL79 IL86 IL92 IL97 IL01 IL05 IL07 IL10 IL12
IT86 IT89 IT93 IT98 IT04 IT08 IT10 IT14
IT87 IT91 IT95 IT00
JP08
LT10 LT13
LU85 LU91 LU94 LU00 LU04 LU07 LU10 LU13
LU97
MX84 MX89 MX94 MX98 MX04 MX08 MX10 MX12
MX92 MX96 MX00
MX02
NL83 NL90 NL93 NL99 NL04 NL07 NL10 NL13
NL87
NO79 NO86 NO91 NO95 NO00 NO04 NO07 NO10 NO13
PA07 PA10 PA13
PY10 PY13
PE04 PE07 PE10 PE13
PL86 PL92 PL95 PL99 PL04 PL07 PL10 PL13
RO95
RO97
RU00 RU04 RU07 RU10 RU13
RS06 RS10 RS13
SK92 SK96 SK04 SK07 SK10 SK13
SI97 SI99 SI04 SI07 SI10 SI12
ZA08 ZA10 ZA12
KR06 KR08 KR10 KR12
ES80 ES85 ES90 ES95 ES00 ES04 ES07 ES10 ES13
SE67 SE81 SE87 SE92 SE95 SE00 SE05
SE75
CH82 CH92 CH00 CH04 CH07 CH10 CH13
CH02
TW81 TW86 TW91 TW95 TW00 TW05 TW07 TW10 TW13
TW97
UK69 UK79 UK86 UK91 UK94 UK99 UK04 UK07 UK10 UK13
UK74 UK95
US74 US79 US86 US91 US94 US00 US04 US07 US10 US13
US97
UY04 UY07 UY10 UY13'
all.codes <- strsplit(all.codes, "\\s+")
all.codes <- paste(all.codes[[1]], "h", sep="")
print(all.codes)
return(all.codes)
}
countries.codes <- all_countries()
for (i in 1:length(2)){ # Change to countries_codes
print(countries.codes[i])
}
## Returns a vector with all the countries and years that are availabe
all_countries <- function(){
all.codes <- 'AT87 AT94 AT00 AT04 AT07 AT10 AT13
AT95
AT97
BE85 BE88 BE95 BE00
BE92 BE97
BR06 BR09 BR13
BR11
CA71 CA81 CA87 CA91 CA94 CA98 CA04 CA07 CA10 CA13
CA75 CA97 CA00
CN02
CO04 CO07 CO10 CO13
CZ92 CZ96 CZ02 CZ04 CZ07 CZ10 CZ13
DK87 DK92 DK95 DK00 DK04 DK07 DK10 DK13
DO07
EG12
EE00 EE04 EE07 EE10 EE13
FI87 FI91 FI95 FI00 FI04 FI07 FI10 FI13
FR78 FR84 FR89 FR94 FR00 FR05 FR10
DE73 DE78 DE83 DE89 DE94 DE00 DE04 DE07 DE10 DE13
DE81 DE84
GE10 GE13
GR95 GR00 GR04 GR07 GR10 GR13
GT06 GT11 GT14
HU91 HU94 HU99 HU05 HU07 HU09 HU12
IS04 IS07 IS10
IN04 IN11
IE87 IE94 IE00 IE04 IE07 IE10
IE95
IE96
IL79 IL86 IL92 IL97 IL01 IL05 IL07 IL10 IL12
IT86 IT89 IT93 IT98 IT04 IT08 IT10 IT14
IT87 IT91 IT95 IT00
JP08
LT10 LT13
LU85 LU91 LU94 LU00 LU04 LU07 LU10 LU13
LU97
MX84 MX89 MX94 MX98 MX04 MX08 MX10 MX12
MX92 MX96 MX00
MX02
NL83 NL90 NL93 NL99 NL04 NL07 NL10 NL13
NL87
NO79 NO86 NO91 NO95 NO00 NO04 NO07 NO10 NO13
PA07 PA10 PA13
PY10 PY13
PE04 PE07 PE10 PE13
PL86 PL92 PL95 PL99 PL04 PL07 PL10 PL13
RO95
RO97
RU00 RU04 RU07 RU10 RU13
RS06 RS10 RS13
SK92 SK96 SK04 SK07 SK10 SK13
SI97 SI99 SI04 SI07 SI10 SI12
ZA08 ZA10 ZA12
KR06 KR08 KR10 KR12
ES80 ES85 ES90 ES95 ES00 ES04 ES07 ES10 ES13
SE67 SE81 SE87 SE92 SE95 SE00 SE05
SE75
CH82 CH92 CH00 CH04 CH07 CH10 CH13
CH02
TW81 TW86 TW91 TW95 TW00 TW05 TW07 TW10 TW13
TW97
UK69 UK79 UK86 UK91 UK94 UK99 UK04 UK07 UK10 UK13
UK74 UK95
US74 US79 US86 US91 US94 US00 US04 US07 US10 US13
US97
UY04 UY07 UY10 UY13'
all.codes <- strsplit(all.codes, "\\s+")
all.codes <- paste(all.codes[[1]], "h", sep="")
print(all.codes)
return(all.codes)
}
countries.codes <- all_countries()
for (i in 1:length(3)){ # Change to countries_codes
print(countries.codes[i])
}
## Returns a vector with all the countries and years that are availabe
all_countries <- function(){
all.codes <- 'AT87 AT94 AT00 AT04 AT07 AT10 AT13
AT95
AT97
BE85 BE88 BE95 BE00
BE92 BE97
BR06 BR09 BR13
BR11
CA71 CA81 CA87 CA91 CA94 CA98 CA04 CA07 CA10 CA13
CA75 CA97 CA00
CN02
CO04 CO07 CO10 CO13
CZ92 CZ96 CZ02 CZ04 CZ07 CZ10 CZ13
DK87 DK92 DK95 DK00 DK04 DK07 DK10 DK13
DO07
EG12
EE00 EE04 EE07 EE10 EE13
FI87 FI91 FI95 FI00 FI04 FI07 FI10 FI13
FR78 FR84 FR89 FR94 FR00 FR05 FR10
DE73 DE78 DE83 DE89 DE94 DE00 DE04 DE07 DE10 DE13
DE81 DE84
GE10 GE13
GR95 GR00 GR04 GR07 GR10 GR13
GT06 GT11 GT14
HU91 HU94 HU99 HU05 HU07 HU09 HU12
IS04 IS07 IS10
IN04 IN11
IE87 IE94 IE00 IE04 IE07 IE10
IE95
IE96
IL79 IL86 IL92 IL97 IL01 IL05 IL07 IL10 IL12
IT86 IT89 IT93 IT98 IT04 IT08 IT10 IT14
IT87 IT91 IT95 IT00
JP08
LT10 LT13
LU85 LU91 LU94 LU00 LU04 LU07 LU10 LU13
LU97
MX84 MX89 MX94 MX98 MX04 MX08 MX10 MX12
MX92 MX96 MX00
MX02
NL83 NL90 NL93 NL99 NL04 NL07 NL10 NL13
NL87
NO79 NO86 NO91 NO95 NO00 NO04 NO07 NO10 NO13
PA07 PA10 PA13
PY10 PY13
PE04 PE07 PE10 PE13
PL86 PL92 PL95 PL99 PL04 PL07 PL10 PL13
RO95
RO97
RU00 RU04 RU07 RU10 RU13
RS06 RS10 RS13
SK92 SK96 SK04 SK07 SK10 SK13
SI97 SI99 SI04 SI07 SI10 SI12
ZA08 ZA10 ZA12
KR06 KR08 KR10 KR12
ES80 ES85 ES90 ES95 ES00 ES04 ES07 ES10 ES13
SE67 SE81 SE87 SE92 SE95 SE00 SE05
SE75
CH82 CH92 CH00 CH04 CH07 CH10 CH13
CH02
TW81 TW86 TW91 TW95 TW00 TW05 TW07 TW10 TW13
TW97
UK69 UK79 UK86 UK91 UK94 UK99 UK04 UK07 UK10 UK13
UK74 UK95
US74 US79 US86 US91 US94 US00 US04 US07 US10 US13
US97
UY04 UY07 UY10 UY13'
all.codes <- strsplit(all.codes, "\\s+")
all.codes <- paste(all.codes[[1]], "h", sep="")
print(all.codes)
return(all.codes)
}
countries.codes <- all_countries()
for (i in 1:length(3)){ # Change to countries_codes
print(countries.codes[i])
}
## Returns a vector with all the countries and years that are availabe
all_countries <- function(){
all.codes <- 'AT87 AT94 AT00 AT04 AT07 AT10 AT13
AT95
AT97
BE85 BE88 BE95 BE00
BE92 BE97
BR06 BR09 BR13
BR11
CA71 CA81 CA87 CA91 CA94 CA98 CA04 CA07 CA10 CA13
CA75 CA97 CA00
CN02
CO04 CO07 CO10 CO13
CZ92 CZ96 CZ02 CZ04 CZ07 CZ10 CZ13
DK87 DK92 DK95 DK00 DK04 DK07 DK10 DK13
DO07
EG12
EE00 EE04 EE07 EE10 EE13
FI87 FI91 FI95 FI00 FI04 FI07 FI10 FI13
FR78 FR84 FR89 FR94 FR00 FR05 FR10
DE73 DE78 DE83 DE89 DE94 DE00 DE04 DE07 DE10 DE13
DE81 DE84
GE10 GE13
GR95 GR00 GR04 GR07 GR10 GR13
GT06 GT11 GT14
HU91 HU94 HU99 HU05 HU07 HU09 HU12
IS04 IS07 IS10
IN04 IN11
IE87 IE94 IE00 IE04 IE07 IE10
IE95
IE96
IL79 IL86 IL92 IL97 IL01 IL05 IL07 IL10 IL12
IT86 IT89 IT93 IT98 IT04 IT08 IT10 IT14
IT87 IT91 IT95 IT00
JP08
LT10 LT13
LU85 LU91 LU94 LU00 LU04 LU07 LU10 LU13
LU97
MX84 MX89 MX94 MX98 MX04 MX08 MX10 MX12
MX92 MX96 MX00
MX02
NL83 NL90 NL93 NL99 NL04 NL07 NL10 NL13
NL87
NO79 NO86 NO91 NO95 NO00 NO04 NO07 NO10 NO13
PA07 PA10 PA13
PY10 PY13
PE04 PE07 PE10 PE13
PL86 PL92 PL95 PL99 PL04 PL07 PL10 PL13
RO95
RO97
RU00 RU04 RU07 RU10 RU13
RS06 RS10 RS13
SK92 SK96 SK04 SK07 SK10 SK13
SI97 SI99 SI04 SI07 SI10 SI12
ZA08 ZA10 ZA12
KR06 KR08 KR10 KR12
ES80 ES85 ES90 ES95 ES00 ES04 ES07 ES10 ES13
SE67 SE81 SE87 SE92 SE95 SE00 SE05
SE75
CH82 CH92 CH00 CH04 CH07 CH10 CH13
CH02
TW81 TW86 TW91 TW95 TW00 TW05 TW07 TW10 TW13
TW97
UK69 UK79 UK86 UK91 UK94 UK99 UK04 UK07 UK10 UK13
UK74 UK95
US74 US79 US86 US91 US94 US00 US04 US07 US10 US13
US97
UY04 UY07 UY10 UY13'
all.codes <- strsplit(all.codes, "\\s+")
all.codes <- paste(all.codes[[1]], "h", sep="")
print(all.codes)
return(all.codes)
}
countries.codes <- all_countries()
for (i in 1:length(3)){ # Change to countries_codes
print(i)
print(countries.codes[i])
}
## Returns a vector with all the countries and years that are availabe
all_countries <- function(){
all.codes <- 'AT87 AT94 AT00 AT04 AT07 AT10 AT13
AT95
AT97
BE85 BE88 BE95 BE00
BE92 BE97
BR06 BR09 BR13
BR11
CA71 CA81 CA87 CA91 CA94 CA98 CA04 CA07 CA10 CA13
CA75 CA97 CA00
CN02
CO04 CO07 CO10 CO13
CZ92 CZ96 CZ02 CZ04 CZ07 CZ10 CZ13
DK87 DK92 DK95 DK00 DK04 DK07 DK10 DK13
DO07
EG12
EE00 EE04 EE07 EE10 EE13
FI87 FI91 FI95 FI00 FI04 FI07 FI10 FI13
FR78 FR84 FR89 FR94 FR00 FR05 FR10
DE73 DE78 DE83 DE89 DE94 DE00 DE04 DE07 DE10 DE13
DE81 DE84
GE10 GE13
GR95 GR00 GR04 GR07 GR10 GR13
GT06 GT11 GT14
HU91 HU94 HU99 HU05 HU07 HU09 HU12
IS04 IS07 IS10
IN04 IN11
IE87 IE94 IE00 IE04 IE07 IE10
IE95
IE96
IL79 IL86 IL92 IL97 IL01 IL05 IL07 IL10 IL12
IT86 IT89 IT93 IT98 IT04 IT08 IT10 IT14
IT87 IT91 IT95 IT00
JP08
LT10 LT13
LU85 LU91 LU94 LU00 LU04 LU07 LU10 LU13
LU97
MX84 MX89 MX94 MX98 MX04 MX08 MX10 MX12
MX92 MX96 MX00
MX02
NL83 NL90 NL93 NL99 NL04 NL07 NL10 NL13
NL87
NO79 NO86 NO91 NO95 NO00 NO04 NO07 NO10 NO13
PA07 PA10 PA13
PY10 PY13
PE04 PE07 PE10 PE13
PL86 PL92 PL95 PL99 PL04 PL07 PL10 PL13
RO95
RO97
RU00 RU04 RU07 RU10 RU13
RS06 RS10 RS13
SK92 SK96 SK04 SK07 SK10 SK13
SI97 SI99 SI04 SI07 SI10 SI12
ZA08 ZA10 ZA12
KR06 KR08 KR10 KR12
ES80 ES85 ES90 ES95 ES00 ES04 ES07 ES10 ES13
SE67 SE81 SE87 SE92 SE95 SE00 SE05
SE75
CH82 CH92 CH00 CH04 CH07 CH10 CH13
CH02
TW81 TW86 TW91 TW95 TW00 TW05 TW07 TW10 TW13
TW97
UK69 UK79 UK86 UK91 UK94 UK99 UK04 UK07 UK10 UK13
UK74 UK95
US74 US79 US86 US91 US94 US00 US04 US07 US10 US13
US97
UY04 UY07 UY10 UY13'
all.codes <- strsplit(all.codes, "\\s+")
all.codes <- paste(all.codes[[1]], "h", sep="")
print(all.codes)
return(all.codes)
}
countries.codes <- all_countries()
for (i in 1:3){ # Change to countries_codes
print(i)
print(countries.codes[i])
}
install.packages('knitr', dependencies = TRUE)
---
title: "Example"
author: "Alex Guanga"
date: "12/4/2017"
output: html_document
runtime: shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r eruptions, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r tabsets, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
library("ISLR", lib.loc="~/Library/R/3.4/library")
names(Carseats )
lm.fit <- lm(Sales∼.+Income:Advertising+Price:Age, data=Carseats)
lm.fit <- lm(Sales~.+Income:Advertising+Price:Age, data=Carseats)
summary(lm.fit)
cont
?contrasts
attach(Carseats)
# Info on dummy variable
contrasts(Shelveloc)
attach(Carseats)
contrasts(Carseats$Shelveloc)
contrasts(Carseats$ShelveLoc)
contrasts(ShelveLoc)
test <- read.csv("./test.csv", header=TRUE)
train <- read.csv("./train.csv", header=TRUE)
# Adding an empty variable onto to the testing set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# Factor is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
str(data.combined)
table(data.combined$Survived)
table(data.combined$Pclass)
# Changing names from factors to strings
train$Name <- as.character(train$Name)
data.combined$Name <- as.character(data.combined$Name)
# Comparing the total names with unique names.
cat("Unique names: ", length(unique(data.combined$Name)),
"Total names: ", length(data.combined$Name))
# Storing the values that are duplicates
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
#table(data.combined[which(data.combined$Name %in% dup.names),])
```
# Storing the values that are duplicates
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
#table(data.combined[which(data.combined$Name %in% dup.names),])
```
setwd("~/All_Projects/ds-education/OC_AZMachineLearning/02_Regression/06_PolyRegression")
df <- read.csv("./Position_Salaries.csv")
df[2:3]
df[c('Level')]
df[c('Level', 'Salaries')]
df <- df[c(['Level', 'Salaries'])]
df
df[c(['Level', 'Salary'])]
df[c('Level', 'Salary')]
df <- df[c('Level', 'Salary')]
linreg.1 <- lm(Salary ~ ., data = df)
summary(linreg.1)
df$Level2 <- df$Level^2
polyreg <- lm(Salary ~ ., data = df)
summary(linreg.2)
df$Level2 <- df$Level^2
polyreg <- lm(Salary ~ ., data = df)
summary(polyreg)
df$Level2 <- df$Level^2
df$Level3 <- df$Level^3
polyreg <- lm(Salary ~ ., data = df)
summary(polyreg)
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x = df$Level, y = df$Salary),
color = 'red') +
geom_line(aes(x = df$Level, y = predict(linreg.1, newdata = df)),
color = 'blue') +
ggtitle("Truth or Bluff (Linear Regression)") +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = df$Level, y = df$Salary),
color = 'red') +
geom_line(aes(x = df$Level, y = predict(polyreg, newdata = df)),
color = 'blue') +
ggtitle("Truth or Bluff (Poly Regression)") +
xlab('Level') +
ylab('Salary')
data.frame(Level=6.5)
data.frame(Level=6.5,2)
data.frame(Level=6.5,2,2)
y.pred <- predict(linreg.1, data.frame(Level=6.5))
y.pred <- predict(polyreg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3))
y.pred
y.pred <- predict(linreg.1, data.frame(Level=6.5))
y.pred
